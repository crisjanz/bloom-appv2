import { FC, ReactNode, useEffect, useMemo, useRef, useState } from 'react';
import CashPaymentModal from './CashPaymentModal';
import CardPaymentModal from './CardPaymentModal';
import ManualPaymentModal from './ManualPaymentModal';
import SplitPaymentView, {
  SplitPaymentRow,
  SplitPaymentTender,
} from './SplitPaymentView';
import NotificationModal from './NotificationModal';
import OrderCompletionSummary from './OrderCompletionSummary';
import GiftCardActivationModal from '../../orders/payment/GiftCardActivationModal';
import GiftCardHandoffModal from '../../orders/payment/GiftCardHandoffModal';
import GiftCardInput from '../../orders/payment/GiftCardInput';
import CouponInput from '../../orders/payment/CouponInput';
import { orderContainsGiftCards } from '@shared/utils/giftCardHelpers';
import { useCouponValidation } from '@shared/hooks/useCouponValidation';
import InputField from '@shared/ui/forms/input/InputField';
import {
  BoltIcon,
  CreditCardIcon,
  DocsIcon,
  DollarLineIcon,
  DollarSignIcon,
  HomeIcon,
  TruckIcon,
} from '@shared/assets/icons';

type Props = {
  open: boolean;
  total: number;
  cartItems?: any[];
  customer?: any;
  customerName?: string;
  orderIds?: string[];
  employeeId?: string;
  taxAmount?: number;
  tipAmount?: number;
  onComplete: (transactionData?: any) => void;
  onCancel: () => void;
  appliedDiscounts?: Array<{ type: string; amount: number; description: string }>;
  onDiscountsChange?: (discounts: Array<{ type: string; amount: number; description: string }>) => void;
  onGiftCardChange?: (amount: number) => void;
  onCouponChange?: (amount: number, name?: string) => void;
};

type QuickActionsState = {
  emailReceipt: boolean;
  printReceipt: boolean;
};

type CompletionData = {
  transactionNumber: string;
  transactionId: string;
  totalAmount: number;
  paymentMethods: Array<{ method: string; amount: number; details?: any }>;
  completedOrders: Array<{
    id: string;
    type: 'delivery' | 'pos';
    customerName?: string;
    total: number;
  }>;
};

type PaymentTileId =
  | 'cash'
  | 'card_square'
  | 'card_stripe'
  | 'house_account'
  | 'cod'
  | 'check'
  | 'split'
  | 'discounts';

type PaymentPayload = {
  method: string;
  amount: number;
  metadata?: Record<string, any>;
};

type ModalContext =
  | null
  | {
      mode: 'single';
      tender: PaymentTileId;
      amount: number;
    }
  | {
      mode: 'split';
      tender: PaymentTileId;
      amount: number;
      rowId: string;
    };

type PaymentTile = {
  id: PaymentTileId;
  label: string;
  description: string;
  icon: ReactNode;
};

const iconWrapperClass = 'h-7 w-7 text-[#597485]';

const PAYMENT_TILES: PaymentTile[] = [
  {
    id: 'cash',
    label: 'Cash',
    description: 'Count tender & auto-calc change',
    icon: <DollarLineIcon className={iconWrapperClass} />,
  },
  {
    id: 'card_square',
    label: 'Square Card',
    description: 'Tap, dip, or swipe on the Square reader',
    icon: <CreditCardIcon className={iconWrapperClass} />,
  },
  {
    id: 'card_stripe',
    label: 'Stripe Card',
    description: 'Charge via Stripe terminal or manual entry',
    icon: <CreditCardIcon className={iconWrapperClass} />,
  },
  {
    id: 'house_account',
    label: 'House Account',
    description: 'Post this sale to the customer’s account',
    icon: <HomeIcon className={iconWrapperClass} />,
  },
  {
    id: 'cod',
    label: 'COD',
    description: 'Collect payment when the order is delivered',
    icon: <TruckIcon className={iconWrapperClass} />,
  },
  {
    id: 'check',
    label: 'Check',
    description: 'Record check details for reconciliation',
    icon: <DocsIcon className={iconWrapperClass} />,
  },
  {
    id: 'split',
    label: 'Split',
    description: 'Layer multiple tenders across rows',
    icon: <BoltIcon className={iconWrapperClass} />,
  },
  {
    id: 'discounts',
    label: 'Discounts',
    description: 'Apply manual discounts, gift cards, or coupons',
    icon: <DollarSignIcon className={iconWrapperClass} />,
  },
];

const MANUAL_METHOD_CONFIG: Record<
  'house_account' | 'cod' | 'check',
  {
    label: string;
    referenceLabel: string;
    instructions?: string;
    requireReference?: boolean;
  }
> = {
  house_account: {
    label: 'House Account',
    referenceLabel: 'Account Reference',
    instructions: 'Attach this charge to the customer’s account record.',
    requireReference: true,
  },
  cod: {
    label: 'Cash on Delivery',
    referenceLabel: 'Delivery Notes',
    instructions: 'Leave guidance for the driver when collecting payment on delivery.',
    requireReference: false,
  },
  check: {
    label: 'Check',
    referenceLabel: 'Check Number',
    instructions: 'Record the check number for bookkeeping.',
    requireReference: true,
  },
};

const formatCurrency = (value: number) => `$${value.toFixed(2)}`;

const mapPaymentMethodType = (method: string): string => {
  const methodMap: Record<string, string> = {
    cash: 'CASH',
    credit: 'CARD',
    debit: 'CARD',
    gift_card: 'GIFT_CARD',
    store_credit: 'STORE_CREDIT',
    check: 'CHECK',
    cod: 'COD',
    house_account: 'HOUSE_ACCOUNT',
  };

  if (method.startsWith('offline:') || method === 'wire') {
    return 'OFFLINE';
  }

  return methodMap[method] || 'CASH';
};

const getPaymentProvider = (method: string, providerFromMetadata?: string): string => {
  if (providerFromMetadata) return providerFromMetadata.toUpperCase();
  if (method === 'credit' || method === 'debit') return 'SQUARE';
  return 'INTERNAL';
};

const transformCartToOrders = (cartItems: any[] = [], customerName?: string) => {
  if (!cartItems.length) return [];
  return [
    {
      id: 'pos-order',
      type: 'pos' as const,
      customerName,
      total: cartItems.reduce(
        (sum, item) => sum + (item.unitPrice ?? item.price ?? 0) * (item.quantity ?? 0),
        0,
      ),
    },
  ];
};

const MIN_BALANCE = 0.01;

const PaymentController: FC<Props> = ({
  open,
  total,
  cartItems = [],
  customer,
  customerName,
  orderIds = [],
  employeeId,
  taxAmount = 0,
  tipAmount = 0,
  onComplete,
  onCancel,
  appliedDiscounts = [],
  onDiscountsChange,
  onGiftCardChange,
  onCouponChange,
}) => {
  const [view, setView] = useState<'selection' | 'split'>('selection');
  const [activeModal, setActiveModal] = useState<PaymentTileId | null>(null);
  const [modalContext, setModalContext] = useState<ModalContext>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [quickActions, setQuickActions] = useState<QuickActionsState>({
    emailReceipt: false,
    printReceipt: false,
  });
  const [showCompletion, setShowCompletion] = useState(false);
  const [completionData, setCompletionData] = useState<CompletionData | null>(null);
  const [lastSubmittedPayments, setLastSubmittedPayments] = useState<PaymentPayload[]>([]);
  const [showNotificationModal, setShowNotificationModal] = useState(false);
  const [notificationStatus, setNotificationStatus] = useState<{
    type: 'success' | 'error';
    message: string;
  } | null>(null);
  const [showAdjustments, setShowAdjustments] = useState(false);
  const [manualDiscountType, setManualDiscountType] = useState<'percent' | 'amount'>('percent');
  const [manualDiscountValue, setManualDiscountValue] = useState('');
  const [manualDiscountReason, setManualDiscountReason] = useState('');
  const [manualDiscountError, setManualDiscountError] = useState<string | null>(null);
  const [giftCardRedemptions, setGiftCardRedemptions] = useState<
    Array<{ cardNumber: string; amount: number }>
  >([]);
  const [couponCode, setCouponCode] = useState('');
  const [couponSuccess, setCouponSuccess] = useState('');
  const [couponError, setCouponError] = useState('');
  const {
    validateCoupon,
    clearValidation,
    isValidating,
    validationResult,
    isValid: isCouponValid,
    discountAmount: validatedDiscountAmount,
  } = useCouponValidation();
  const [pendingFinalization, setPendingFinalization] = useState<PaymentPayload[] | null>(null);
  const [showGiftCardActivation, setShowGiftCardActivation] = useState(false);
  const [giftCardNumbers, setGiftCardNumbers] = useState<any[]>([]);
  const [showGiftCardHandoff, setShowGiftCardHandoff] = useState(false);
  const [activatedGiftCards, setActivatedGiftCards] = useState<any[]>([]);
  const [splitRows, setSplitRows] = useState<SplitPaymentRow[]>([]);
  const [splitPayments, setSplitPayments] = useState<Record<string, PaymentPayload>>({});
  const splitIdRef = useRef(0);

  const customerDisplayName = useMemo(() => {
    if (customerName) return customerName;
    if (!customer) return 'Walk-in Customer';
    const name = [customer.firstName, customer.lastName].filter(Boolean).join(' ').trim();
    return name || 'Walk-in Customer';
  }, [customer, customerName]);

  const hasGiftCards = useMemo(() => orderContainsGiftCards(cartItems), [cartItems]);

  const splitPaidAmount = useMemo(() => {
    return splitRows.reduce((sum, row) => {
      if (row.status !== 'completed') return sum;
      const payment = splitPayments[row.id];
      return sum + (payment?.amount ?? 0);
    }, 0);
  }, [splitRows, splitPayments]);

  const splitRemaining = useMemo(() => {
    return Math.max(0, Number((total - splitPaidAmount).toFixed(2)));
  }, [total, splitPaidAmount]);

  const nextSplitRowId = () => {
    splitIdRef.current += 1;
    return `split-${splitIdRef.current}`;
  };

  const resetState = () => {
    setView('selection');
    setActiveModal(null);
    setModalContext(null);
    setIsProcessing(false);
    setError(null);
    setQuickActions({ emailReceipt: false, printReceipt: false });
    setShowCompletion(false);
    setCompletionData(null);
    setLastSubmittedPayments([]);
    setShowNotificationModal(false);
    setNotificationStatus(null);
    setShowAdjustments(false);
    setManualDiscountType('percent');
    setManualDiscountValue('');
    setManualDiscountReason('');
    setManualDiscountError(null);
    setGiftCardRedemptions([]);
    setCouponCode('');
    setCouponSuccess('');
    setCouponError('');
    clearValidation();
    setPendingFinalization(null);
    setShowGiftCardActivation(false);
    setGiftCardNumbers([]);
    setShowGiftCardHandoff(false);
    setActivatedGiftCards([]);
    setSplitRows([]);
    setSplitPayments({});
    setNotificationStatus(null);
  };

  useEffect(() => {
    if (!open) {
      resetState();
      return;
    }
    resetState();
  }, [open]);

  const toggleQuickAction = (key: keyof QuickActionsState) => {
    setQuickActions((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const ensureSplitCoverage = (rows: SplitPaymentRow[]) => {
    const plannedTotal = rows.reduce((sum, row) => sum + row.amount, 0);
    if (plannedTotal < total - MIN_BALANCE) {
      const missing = Number((total - plannedTotal).toFixed(2));
      const autoRow: SplitPaymentRow = {
        id: nextSplitRowId(),
        tender: 'cash',
        amount: missing,
        status: 'pending',
      };
      return [...rows, autoRow];
    }
    return rows;
  };

  const updateSplitRows = (updater: (rows: SplitPaymentRow[]) => SplitPaymentRow[]) => {
    setSplitRows((prev) => ensureSplitCoverage(updater(prev)));
  };

  const handleApplyManualDiscount = () => {
    const rawValue = parseFloat(manualDiscountValue);
    if (!rawValue || rawValue <= 0) {
      setManualDiscountError('Enter a discount value greater than zero.');
      return;
    }
    const discountAmount =
      manualDiscountType === 'percent'
        ? Number(((total * rawValue) / 100).toFixed(2))
        : Number(rawValue.toFixed(2));
    if (discountAmount <= 0) {
      setManualDiscountError('Discount would not change the balance.');
      return;
    }
    const description =
      manualDiscountType === 'percent'
        ? `${rawValue}% Discount${manualDiscountReason ? ` – ${manualDiscountReason}` : ''}`
        : `$${discountAmount.toFixed(2)} Discount${manualDiscountReason ? ` – ${manualDiscountReason}` : ''}`;
    const nextDiscounts = [...appliedDiscounts, { type: manualDiscountType, amount: discountAmount, description }];
    onDiscountsChange?.(nextDiscounts);
    setManualDiscountError(null);
    setManualDiscountValue('');
    setManualDiscountReason('');
    setShowAdjustments(false);
  };

  const handleGiftCardChange = (
    amount: number,
    redemptionData: Array<{ cardNumber: string; amount: number }> = [],
  ) => {
    onGiftCardChange?.(amount);
    setGiftCardRedemptions(redemptionData);
  };

  const handleCouponValidation = async (code: string) => {
    const trimmed = code.trim();
    setCouponError('');
    setCouponSuccess('');
    if (!trimmed) {
      clearValidation();
      return;
    }

    const productIds = cartItems
      .map((item) => item.productId ?? item.id)
      .filter(Boolean);
    const categoryIds = cartItems
      .map((item) => item.categoryId)
      .filter(Boolean);

    const result = await validateCoupon(trimmed, total, {
      customerId: customer?.id,
      productIds,
      categoryIds,
      source: 'POS',
    });

    if (result?.valid) {
      setCouponSuccess(
        `Ready to apply ${result.coupon?.name || trimmed} for ${formatCurrency(
          result.discountAmount ?? 0,
        )}`,
      );
      setCouponError('');
    } else {
      setCouponError(result?.error || 'Coupon is not valid for this order.');
      setCouponSuccess('');
    }
  };

  const handleApplyCoupon = async () => {
    const trimmed = couponCode.trim();
    if (!trimmed) {
      setCouponError('Enter a coupon code first.');
      return;
    }

    if (!validationResult || !validationResult.valid) {
      await handleCouponValidation(trimmed);
    }

    if (!validationResult || !validationResult.valid || !validatedDiscountAmount) {
      setCouponError(validationResult?.error || 'Coupon is not valid for this order.');
      setCouponSuccess('');
      return;
    }

    onCouponChange?.(validatedDiscountAmount ?? 0, validationResult.coupon?.name);
    setCouponSuccess(`Applied ${validationResult.coupon?.name || trimmed}`);
    setCouponError('');
    setShowAdjustments(false);
  };

  const handleRemoveCoupon = () => {
    setCouponCode('');
    setCouponSuccess('');
    setCouponError('');
    clearValidation();
    onCouponChange?.(0);
  };

  const handleTileClick = (tileId: PaymentTileId) => {
    if (isProcessing) return;
    setError(null);

    if (tileId === 'discounts') {
      setShowAdjustments(true);
      return;
    }

    if (tileId === 'split') {
      const half = Number((total / 2).toFixed(2));
      const remainder = Number((total - half).toFixed(2));
      setSplitPayments({});
      const initialRows: SplitPaymentRow[] = [
        {
          id: nextSplitRowId(),
          tender: 'card_square',
          amount: half > 0 ? half : total,
          status: 'pending',
        },
        {
          id: nextSplitRowId(),
          tender: 'cash',
          amount: remainder > 0 ? remainder : half,
          status: 'pending',
        },
      ];
      setSplitRows(ensureSplitCoverage(initialRows));
      setView('split');
      return;
    }

    if (total <= MIN_BALANCE) {
      setError('Balance has been covered. Adjust discounts or split to proceed.');
      return;
    }

    setModalContext({
      mode: 'single',
      tender: tileId,
      amount: Number(total.toFixed(2)),
    });
    setActiveModal(tileId);
  };

  const handleModalCancel = () => {
    if (modalContext?.mode === 'split' && modalContext.rowId) {
      updateSplitRows((rows) =>
        rows.map((row) =>
          row.id === modalContext.rowId ? { ...row, status: 'pending' } : row,
        ),
      );
    }
    setModalContext(null);
    setActiveModal(null);
  };

  const normalizePayments = (payments: PaymentPayload[]): PaymentPayload[] => {
    if (!payments.length) return payments;
    const totalSubmitted = payments.reduce((sum, payment) => sum + payment.amount, 0);
    const difference = Number((total - totalSubmitted).toFixed(2));
    if (Math.abs(difference) <= MIN_BALANCE) {
      const clone = payments.map((payment, index) =>
        index === payments.length - 1
          ? { ...payment, amount: Number((payment.amount + difference).toFixed(2)) }
          : payment,
      );
      return clone;
    }
    return payments;
  };

  const attemptFinalize = (payments: PaymentPayload[]) => {
    const normalized = normalizePayments(payments);
    const coverage = normalized.reduce((sum, payment) => sum + payment.amount, 0);
    if (Math.abs(coverage - total) > 1) {
      setError('Payments do not cover the order total.');
      return;
    }

    if (hasGiftCards && giftCardNumbers.length === 0) {
      setPendingFinalization(normalized);
      setShowGiftCardActivation(true);
      return;
    }

    void submitTransaction(normalized);
  };

  const generatePaymentSummary = (payment: PaymentPayload): string | undefined => {
    if (payment.method === 'cash' && payment.metadata?.cashReceived) {
      const change =
        typeof payment.metadata.changeDue === 'number' && payment.metadata.changeDue > 0
          ? ` • Change ${formatCurrency(payment.metadata.changeDue)}`
          : '';
      return `Cash received ${formatCurrency(payment.metadata.cashReceived)}${change}`;
    }
    if (payment.method === 'credit') {
      const provider = payment.metadata?.provider
        ? payment.metadata.provider.charAt(0).toUpperCase() + payment.metadata.provider.slice(1)
        : 'Card';
      const last4 = payment.metadata?.cardLast4 ? ` • **** ${payment.metadata.cardLast4}` : '';
      return `${provider}${last4}`;
    }
    if (payment.method === 'check' && payment.metadata?.reference) {
      return `Check #${payment.metadata.reference}`;
    }
    if ((payment.method === 'cod' || payment.method === 'house_account') && payment.metadata?.reference) {
      return payment.metadata.reference;
    }
    return undefined;
  };

  const submitTransaction = async (payments: PaymentPayload[]) => {
    if (isProcessing) return;
    setIsProcessing(true);
    setError(null);
    setActiveModal(null);
    setModalContext(null);

    try {
      let customerId = customer?.id;
      if (!customerId) {
        const guestResponse = await fetch('/api/customers', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            firstName: 'Walk-in',
            lastName: 'Customer',
            email: null,
            phone: null,
          }),
        });

        if (!guestResponse.ok) {
          throw new Error('Failed to create guest customer');
        }

        const guestCustomer = await guestResponse.json();
        customerId = guestCustomer.id;
      }

      const apiPayments = payments.map((payment) => {
        const base = {
          type: mapPaymentMethodType(payment.method),
          provider: getPaymentProvider(payment.method, payment.metadata?.provider),
          amount: Number(payment.amount.toFixed(2)),
        };

        if (payment.method === 'credit') {
          return {
            ...base,
            providerTransactionId: payment.metadata?.transactionId,
            paymentIntentId: payment.metadata?.paymentIntentId,
            cardLast4: payment.metadata?.cardLast4,
            cardBrand: payment.metadata?.cardBrand,
          };
        }

        if (payment.method === 'cash') {
          return {
            ...base,
            providerMetadata:
              typeof payment.metadata?.cashReceived === 'number'
                ? {
                    cashReceived: payment.metadata.cashReceived,
                    changeDue: payment.metadata?.changeDue ?? 0,
                  }
                : undefined,
          };
        }

        if (payment.method === 'check') {
          return {
            ...base,
            checkNumber: payment.metadata?.reference,
            providerMetadata: payment.metadata?.reference ? { reference: payment.metadata.reference } : undefined,
          };
        }

        if (payment.method === 'house_account' || payment.method === 'cod') {
          return {
            ...base,
            providerMetadata: payment.metadata?.reference ? { reference: payment.metadata.reference } : undefined,
          };
        }

        if (payment.method.startsWith('offline:')) {
          return {
            ...base,
            offlineMethodId: payment.metadata?.offlineMethodId,
            providerMetadata: payment.metadata?.reference ? { reference: payment.metadata.reference } : undefined,
          };
        }

        return base;
      });

      const transactionResponse = await fetch('/api/payment-transactions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          customerId,
          employeeId,
          channel: 'POS',
          totalAmount: payments.reduce((sum, payment) => sum + payment.amount, 0),
          taxAmount,
          tipAmount,
          notes: `POS transaction for ${customerDisplayName || 'Walk-in Customer'}`,
          paymentMethods: apiPayments,
          orderIds,
        }),
      });

      if (!transactionResponse.ok) {
        const errorData = await transactionResponse.json();
        throw new Error(errorData.error || 'Failed to process payment');
      }

      const transaction = await transactionResponse.json();
      setLastSubmittedPayments(payments);

      if (giftCardNumbers.length > 0) {
        const { purchaseGiftCards } = await import('@shared/legacy-services/giftCardService');
        const cards = giftCardNumbers.map((card) => ({
          cardNumber: card.cardNumber,
          amount: card.amount,
          type: card.type || 'PHYSICAL',
          recipientName: card.recipientName || customerDisplayName,
          recipientEmail: card.recipientEmail,
        }));

        try {
          const purchaseResult = await purchaseGiftCards(cards, customerId, employeeId, transaction.id);
          setActivatedGiftCards(purchaseResult.cards);
          setShowGiftCardHandoff(true);
        } catch (giftError: any) {
          setError(`Payment completed, but gift card activation failed: ${giftError.message}`);
        }
      }

      if (giftCardRedemptions.length > 0) {
        const { redeemGiftCard } = await import('@shared/legacy-services/giftCardService');
        for (const redemption of giftCardRedemptions) {
          try {
            await redeemGiftCard(redemption.cardNumber, redemption.amount, transaction.id, employeeId);
          } catch (redeemError) {
            console.error('Failed to redeem gift card', redeemError);
          }
        }
      }

      const completion: CompletionData = {
        transactionNumber: transaction.transactionNumber,
        transactionId: transaction.id,
        totalAmount: payments.reduce((sum, payment) => sum + payment.amount, 0),
        paymentMethods: payments.map((payment) => ({
          method: payment.method,
          amount: payment.amount,
          details: payment.metadata,
        })),
        completedOrders: transformCartToOrders(cartItems, customerDisplayName),
      };

      setCompletionData(completion);
      setShowCompletion(true);
      setShowAdjustments(false);
      setPendingFinalization(null);
      setView('selection');

      if (quickActions.emailReceipt) {
        setShowNotificationModal(true);
      }
      if (quickActions.printReceipt) {
        console.log('🖨️ Print receipt for', transaction.transactionNumber);
      }

      onComplete({
        transactionNumber: transaction.transactionNumber,
        transactionId: transaction.id,
        totalAmount: completion.totalAmount,
        customerId,
        orderIds,
      });
    } catch (processingError) {
      console.error('Payment processing failed:', processingError);
      setError(
        processingError instanceof Error ? processingError.message : 'Payment processing failed',
      );
    } finally {
      setIsProcessing(false);
      setActiveModal(null);
      setModalContext(null);
      setPendingFinalization(null);
    }
  };

  const finalizeFromModal = (payload: PaymentPayload, rowNote?: string) => {
    if (!modalContext) return;

    if (modalContext.mode === 'split' && modalContext.rowId) {
      const amount = Number(modalContext.amount.toFixed(2));
      const payment: PaymentPayload = { ...payload, amount };
      setSplitPayments((prev) => ({ ...prev, [modalContext.rowId]: payment }));
      updateSplitRows((rows) =>
        rows.map((row) =>
          row.id === modalContext.rowId
            ? {
                ...row,
                status: 'completed',
                details: rowNote ?? generatePaymentSummary(payment),
              }
            : row,
        ),
      );
      setModalContext(null);
      setActiveModal(null);
      return;
    }

    const amount = Number(modalContext.amount.toFixed(2));
    const singlePayment: PaymentPayload = { ...payload, amount };
    attemptFinalize([singlePayment]);
  };

  const handleCashComplete = (data: { cashReceived: number; changeDue: number }) => {
    if (!modalContext) return;
    finalizeFromModal(
      {
        method: 'cash',
        amount: modalContext.amount,
        metadata: {
          cashReceived: data.cashReceived,
          changeDue: data.changeDue,
        },
      },
    );
  };

  const handleCardComplete = (data: {
    method: string;
    provider: 'stripe' | 'square';
    transactionId?: string;
    paymentIntentId?: string;
    cardLast4?: string;
    cardBrand?: string;
  }) => {
    if (!modalContext) return;
    finalizeFromModal(
      {
        method: 'credit',
        amount: modalContext.amount,
        metadata: {
          provider: data.provider,
          transactionId: data.transactionId,
          paymentIntentId: data.paymentIntentId,
          cardLast4: data.cardLast4,
          cardBrand: data.cardBrand,
        },
      },
      `${data.provider === 'stripe' ? 'Stripe' : 'Square'} ${data.transactionId ? `• ${data.transactionId}` : ''}`,
    );
  };

  const handleManualComplete = (method: 'house_account' | 'cod' | 'check', data: { reference?: string }) => {
    if (!modalContext) return;
    finalizeFromModal(
      {
        method,
        amount: modalContext.amount,
        metadata: {
          reference: data.reference,
        },
      },
    );
  };

  const handleGiftCardActivationComplete = (cards: any[]) => {
    setGiftCardNumbers(cards);
    setShowGiftCardActivation(false);
    if (pendingFinalization) {
      void submitTransaction(pendingFinalization);
    }
  };

  const handleNotificationSuccess = (message: string) => {
    setShowNotificationModal(false);
    setNotificationStatus({ type: 'success', message });
    setTimeout(() => setNotificationStatus(null), 3000);
  };

  const handleNotificationError = (message: string) => {
    setNotificationStatus({ type: 'error', message });
    setTimeout(() => setNotificationStatus(null), 4000);
  };

  const handleNewOrder = () => {
    resetState();
    onComplete();
  };

  const handleSplitBack = () => {
    setView('selection');
    setSplitRows([]);
    setSplitPayments({});
    setModalContext(null);
    setActiveModal(null);
  };

  const handleSplitTenderChange = (rowId: string, tender: SplitPaymentTender) => {
    updateSplitRows((rows) =>
      rows.map((row) =>
        row.id === rowId && row.status === 'pending'
          ? { ...row, tender }
          : row,
      ),
    );
  };

  const handleSplitAmountChange = (rowId: string, amount: number) => {
    updateSplitRows((rows) =>
      rows.map((row) =>
        row.id === rowId && row.status === 'pending'
          ? { ...row, amount: Number(Math.max(0, amount).toFixed(2)) }
          : row,
      ),
    );
  };

  const handleSplitAddRow = () => {
    updateSplitRows((rows) => {
      const plannedTotal = rows.reduce((sum, row) => sum + row.amount, 0);
      const remainingAmount = Math.max(0, Number((total - plannedTotal).toFixed(2)));
      const nextRow: SplitPaymentRow = {
        id: nextSplitRowId(),
        tender: 'cash',
        amount: remainingAmount > MIN_BALANCE ? remainingAmount : Number((total / 2).toFixed(2)),
        status: 'pending',
      };
      return [...rows, nextRow];
    });
  };

  const handleSplitPayRow = (rowId: string) => {
    const row = splitRows.find((item) => item.id === rowId);
    if (!row || row.status !== 'pending') return;
    if (row.amount <= MIN_BALANCE) {
      setError('Enter an amount for the split payment before charging.');
      return;
    }
    updateSplitRows((rows) =>
      rows.map((item) =>
        item.id === rowId ? { ...item, status: 'processing' } : item,
      ),
    );
    setModalContext({
      mode: 'split',
      tender: row.tender,
      amount: row.amount,
      rowId,
    });
    setActiveModal(row.tender);
  };

  useEffect(() => {
    if (view !== 'split') return;
    if (isProcessing || showCompletion) return;
    if (modalContext?.mode === 'split') return;
    if (pendingFinalization) return;

    const outstandingRows = splitRows.filter((row) => row.status !== 'completed');
    if (outstandingRows.some((row) => row.status === 'processing')) return;

    const completedRows = splitRows.filter((row) => row.status === 'completed');
    if (!completedRows.length) return;

    const payments = completedRows
      .map((row) => splitPayments[row.id])
      .filter((payment): payment is PaymentPayload => Boolean(payment));

    if (payments.length !== completedRows.length) return;

    const paid = payments.reduce((sum, payment) => sum + payment.amount, 0);
    const remaining = Math.max(0, Number((total - paid).toFixed(2)));

    if (remaining <= MIN_BALANCE && outstandingRows.length === 0) {
      attemptFinalize(payments);
    }
  }, [
    view,
    splitRows,
    splitPayments,
    pendingFinalization,
    total,
    isProcessing,
    showCompletion,
    modalContext,
  ]);

  if (!open) return null;

  if (showCompletion && completionData) {
    const summaryPayments = lastSubmittedPayments.map((payment) => ({
      method: payment.method,
      amount: payment.amount,
      details: generatePaymentSummary(payment),
    }));

    return (
      <>
        <div className="flex h-full w-full flex-col bg-gray-50 px-6 py-6 dark:bg-gray-900">
          <div className="flex flex-col gap-2 pb-6">
            <h2 className="text-2xl font-semibold text-black dark:text-white">Payment Complete</h2>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Transaction {completionData.transactionNumber} recorded.
            </p>
          </div>
          <div className="flex-1 overflow-y-auto rounded-2xl border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-boxdark">
            <OrderCompletionSummary
              transactionId={completionData.transactionId}
              transactionNumber={completionData.transactionNumber}
              totalAmount={completionData.totalAmount}
              paymentMethods={summaryPayments}
              completedOrders={completionData.completedOrders}
              giftCards={activatedGiftCards}
              onSendReceipt={() => setShowNotificationModal(true)}
              onPrintReceipt={() =>
                console.log('🖨️ Print receipt for', completionData.transactionNumber)
              }
              onProcessRefund={() =>
                console.log('↩️ Process refund for', completionData.transactionNumber)
              }
              onNewOrder={handleNewOrder}
            />
          </div>
        </div>

        <NotificationModal
          isOpen={showNotificationModal}
          onClose={() => setShowNotificationModal(false)}
          transactionNumber={completionData.transactionNumber}
          transactionId={completionData.transactionId}
          total={completionData.totalAmount}
          customerEmail={customer?.email ?? undefined}
          customerPhone={customer?.phone ?? undefined}
          customerName={customerDisplayName}
          onSuccess={handleNotificationSuccess}
          onError={handleNotificationError}
          defaultChannels={['email']}
          title="Send Receipt"
        />

        <GiftCardHandoffModal
          open={showGiftCardHandoff}
          onClose={() => setShowGiftCardHandoff(false)}
          cards={activatedGiftCards}
          customerName={customerDisplayName}
          isDigital={activatedGiftCards.some((card) => card.type === 'DIGITAL')}
        />

        {notificationStatus && (
          <div
            className={`fixed top-4 right-4 z-[100001] rounded-lg px-6 py-4 text-white shadow-lg ${
              notificationStatus.type === 'success' ? 'bg-green-600' : 'bg-red-600'
            }`}
          >
            {notificationStatus.message}
          </div>
        )}
      </>
    );
  }

  return (
    <>
      <div className="flex h-full w-full bg-gray-50 dark:bg-gray-900">
        <div className="flex h-full w-full flex-col bg-gray-50 dark:bg-gray-900">
          {view === 'split' ? (
            <SplitPaymentView
              total={total}
              rows={splitRows}
              remaining={splitRemaining}
              onBack={handleSplitBack}
              onChangeTender={handleSplitTenderChange}
              onChangeAmount={handleSplitAmountChange}
              onPayRow={handleSplitPayRow}
              onAddRow={handleSplitAddRow}
            />
          ) : (
            <>
              <div className="flex items-center justify-between px-6 py-6">
                <div>
                  <h2 className="text-2xl font-semibold text-black dark:text-white">Collect Payment</h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {customerDisplayName ? `Customer: ${customerDisplayName}` : 'Walk-in Customer'}
                  </p>
                </div>
                <button
                  onClick={() => {
                    resetState();
                    onCancel();
                  }}
                  className="rounded-lg border border-gray-300 px-4 py-2 text-sm font-medium text-gray-600 transition hover:bg-gray-100 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-800"
                >
                  Cancel
                </button>
              </div>

              <div className="flex-1 overflow-y-auto bg-gray-50 px-6 pb-8 space-y-6 dark:bg-gray-900">
                {error && (
                  <div className="rounded-xl border border-red-200 bg-red-50 px-4 py-3 text-sm text-red-700 dark:border-red-800 dark:bg-red-900/20 dark:text-red-300">
                    {error}
                  </div>
                )}

                <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                  <div className="rounded-2xl bg-transparent p-4">
                    <span className="text-xs font-semibold uppercase tracking-wide text-gray-500 dark:text-gray-400">
                      Order Total
                    </span>
                    <div className="mt-1 text-2xl font-bold text-black dark:text-white">
                      {formatCurrency(total)}
                    </div>
                  </div>
                  <div className="rounded-2xl bg-transparent p-4">
                    <span className="text-xs font-semibold uppercase tracking-wide text-gray-500 dark:text-gray-400">
                      Applied Adjustments
                    </span>
                    <div className="mt-1 text-sm text-gray-600 dark:text-gray-300">
                      {appliedDiscounts.length > 0 || giftCardRedemptions.length > 0 || couponSuccess
                        ? (
                            <div className="space-y-1">
                              {appliedDiscounts.map((discount, index) => (
                                <div key={index} className="flex items-center justify-between text-xs">
                                  <span className="truncate">{discount.description}</span>
                                  <span className="font-semibold text-green-600 dark:text-green-400">
                                    −{formatCurrency(discount.amount)}
                                  </span>
                                </div>
                              ))}
                              {giftCardRedemptions.length > 0 && (
                                <div className="flex items-center justify-between text-xs">
                                  <span>Gift Card</span>
                                  <span className="font-semibold text-green-600 dark:text-green-400">
                                    −{formatCurrency(
                                      giftCardRedemptions.reduce(
                                        (sum, card) => sum + card.amount,
                                        0,
                                      ),
                                    )}
                                  </span>
                                </div>
                              )}
                              {couponSuccess && (
                                <div className="text-xs text-green-600 dark:text-green-400">
                                  {couponSuccess}
                                </div>
                              )}
                              {!appliedDiscounts.length &&
                                !giftCardRedemptions.length &&
                                !couponSuccess && <span>None</span>}
                            </div>
                          )
                        : 'None'}
                    </div>
                  </div>
                  <div className="rounded-2xl bg-transparent p-4">
                    <span className="text-xs font-semibold uppercase tracking-wide text-gray-500 dark:text-gray-400">
                      Quick Actions
                    </span>
                    <div className="mt-2 flex flex-wrap gap-2">
                      <button
                        onClick={() => toggleQuickAction('emailReceipt')}
                        className={`flex items-center justify-center rounded-lg px-3 py-1 text-xs font-semibold transition ${
                          quickActions.emailReceipt
                            ? 'bg-[#597485] text-white shadow-md'
                            : 'bg-gray-100 text-gray-600 hover:text-[#597485]'
                        }`}
                      >
                        Email Receipt
                      </button>
                      <button
                        onClick={() => toggleQuickAction('printReceipt')}
                        className={`flex items-center justify-center rounded-lg px-3 py-1 text-xs font-semibold transition ${
                          quickActions.printReceipt
                            ? 'bg-[#597485] text-white shadow-md'
                            : 'bg-gray-100 text-gray-600 hover:text-[#597485]'
                        }`}
                      >
                        Print Receipt
                      </button>
                    </div>
                  </div>
                </div>

                <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                  {PAYMENT_TILES.map((tile) => (
                    <button
                      key={tile.id}
                      onClick={() => handleTileClick(tile.id)}
                      disabled={isProcessing}
                      className="group relative flex h-full flex-col rounded-2xl bg-white p-5 text-left shadow-sm transition hover:-translate-y-0.5 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-[#597485]/20 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-boxdark"
                    >
                      <div className="mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-[#597485]/10 text-[#597485]">
                        {tile.icon}
                      </div>
                      <div className="text-lg font-semibold text-black dark:text-white">
                        {tile.label}
                      </div>
                      <p className="mt-2 text-sm text-gray-500 dark:text-gray-300">
                        {tile.description}
                      </p>
                      {tile.id === 'discounts' && (
                        <span className="absolute right-5 top-5 rounded-full bg-gray-100 px-3 py-1 text-xs font-semibold text-gray-600 transition dark:bg-gray-800 dark:text-gray-300">
                          Adjustments
                        </span>
                      )}
                      {tile.id === 'split' && (
                        <span className="absolute right-5 top-5 rounded-full bg-gray-100 px-3 py-1 text-xs font-semibold text-gray-600 transition dark:bg-gray-800 dark:text-gray-300">
                          Multi Tender
                        </span>
                      )}
                    </button>
                  ))}
                </div>

                {isProcessing && (
                  <div className="rounded-2xl border border-[#597485]/30 bg-[#597485]/5 px-4 py-3 text-sm text-[#597485]">
                    Processing payment… do not close the browser.
                  </div>
                )}
              </div>
            </>
          )}
        </div>

        <CashPaymentModal
          open={activeModal === 'cash'}
          total={modalContext?.amount ?? total}
          onComplete={handleCashComplete}
          onCancel={handleModalCancel}
        />

        <CardPaymentModal
          open={activeModal === 'card_square' || activeModal === 'card_stripe'}
          total={modalContext?.amount ?? total}
          cardType="credit"
          orderIds={orderIds}
          customerEmail={customer?.email ?? undefined}
          customerPhone={customer?.phone ?? undefined}
          customerName={customerDisplayName}
          initialProvider={activeModal === 'card_stripe' ? 'stripe' : 'square'}
          onComplete={handleCardComplete}
          onCancel={handleModalCancel}
        />

        {activeModal &&
          (activeModal === 'house_account' ||
            activeModal === 'cod' ||
            activeModal === 'check') && (
            <ManualPaymentModal
              open
              methodLabel={MANUAL_METHOD_CONFIG[activeModal].label}
              defaultAmount={modalContext?.amount ?? total}
              requireReference={MANUAL_METHOD_CONFIG[activeModal].requireReference}
              referenceLabel={MANUAL_METHOD_CONFIG[activeModal].referenceLabel}
              instructions={MANUAL_METHOD_CONFIG[activeModal].instructions}
              onSubmit={(data) => handleManualComplete(activeModal, data)}
              onCancel={handleModalCancel}
            />
          )}

        <GiftCardActivationModal
          open={showGiftCardActivation}
          onClose={() => setShowGiftCardActivation(false)}
          orderItems={cartItems}
          onActivationComplete={handleGiftCardActivationComplete}
        />

        <NotificationModal
          isOpen={showNotificationModal}
          onClose={() => setShowNotificationModal(false)}
          transactionNumber={completionData?.transactionNumber}
          transactionId={completionData?.transactionId}
          total={completionData?.totalAmount ?? total}
          customerEmail={customer?.email ?? undefined}
          customerPhone={customer?.phone ?? undefined}
          customerName={customerDisplayName}
          onSuccess={handleNotificationSuccess}
          onError={handleNotificationError}
          defaultChannels={['email']}
          title="Send Receipt"
        />

        <GiftCardHandoffModal
          open={showGiftCardHandoff}
          onClose={() => setShowGiftCardHandoff(false)}
          cards={activatedGiftCards}
          customerName={customerDisplayName}
          isDigital={activatedGiftCards.some((card) => card.type === 'DIGITAL')}
        />

        {notificationStatus && (
          <div
            className={`fixed top-4 right-4 z-[100001] rounded-lg px-6 py-4 text-white shadow-lg ${
              notificationStatus.type === 'success' ? 'bg-green-600' : 'bg-red-600'
            }`}
          >
            {notificationStatus.message}
          </div>
        )}
      </div>

      {showAdjustments && (
        <div className="fixed inset-0 z-[100000] flex items-center justify-center bg-black/40 p-4">
          <div className="w-full max-w-3xl overflow-hidden rounded-3xl bg-white shadow-2xl dark:bg-boxdark">
            <div className="flex items-center justify-between border-b border-gray-200 px-6 py-4 dark:border-gray-800">
              <div>
                <h3 className="text-lg font-semibold text-black dark:text-white">Discounts & Credits</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Apply manual discounts, redeem gift cards, or validate coupons before charging.
                </p>
              </div>
              <button
                onClick={() => setShowAdjustments(false)}
                className="text-gray-400 transition hover:text-gray-600 dark:hover:text-gray-200"
              >
                <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="max-h-[75vh] overflow-y-auto px-6 py-6 space-y-8">
              <section className="space-y-4">
                <div>
                  <h4 className="text-base font-semibold text-black dark:text-white">Manual Discount</h4>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Apply a one-off discount for this sale. Percentage discounts are calculated from the current total.
                  </p>
                </div>
                <div className="flex flex-wrap gap-2">
                  <button
                    onClick={() => setManualDiscountType('percent')}
                    className={`rounded-lg px-4 py-2 text-sm font-semibold transition ${
                      manualDiscountType === 'percent'
                        ? 'bg-[#597485] text-white'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    Percentage
                  </button>
                  <button
                    onClick={() => setManualDiscountType('amount')}
                    className={`rounded-lg px-4 py-2 text-sm font-semibold transition ${
                      manualDiscountType === 'amount'
                        ? 'bg-[#597485] text-white'
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    Dollar Amount
                  </button>
                </div>
                <div className="grid gap-4 sm:grid-cols-[200px,1fr]">
                  <InputField
                    label={manualDiscountType === 'percent' ? 'Percent (%)' : 'Amount ($)'}
                    type="number"
                    min="0"
                    step={manualDiscountType === 'percent' ? 1 : 0.01}
                    value={manualDiscountValue}
                    onChange={(event) => setManualDiscountValue(event.target.value)}
                  />
                  <InputField
                    label="Reason (Optional)"
                    value={manualDiscountReason}
                    onChange={(event) => setManualDiscountReason(event.target.value)}
                  />
                </div>
                {manualDiscountError && (
                  <div className="rounded-lg border border-red-200 bg-red-50 px-4 py-2 text-sm text-red-600 dark:border-red-800 dark:bg-red-900/20 dark:text-red-300">
                    {manualDiscountError}
                  </div>
                )}
                <div className="flex justify-end">
                  <button
                    onClick={handleApplyManualDiscount}
                    className="rounded-lg bg-[#597485] px-4 py-2 text-sm font-semibold text-white transition hover:bg-[#4e6575]"
                  >
                    Apply Discount
                  </button>
                </div>
              </section>

              <section className="space-y-4">
                <div>
                  <h4 className="text-base font-semibold text-black dark:text-white">Gift Card Redemption</h4>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Validate and apply store gift cards. Redemption occurs after payment is finalized.
                  </p>
                </div>
                <GiftCardInput onGiftCardChange={handleGiftCardChange} grandTotal={total} />
              </section>

              <section className="space-y-4">
                <div>
                  <h4 className="text-base font-semibold text-black dark:text-white">Coupon Code</h4>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Check eligibility and apply coupon codes sourced from POS settings.
                  </p>
                </div>
                <CouponInput
                  couponCode={couponCode}
                  setCouponCode={(val) => {
                    setCouponCode(val);
                    setCouponError('');
                    setCouponSuccess('');
                  }}
                  onCouponValidation={handleCouponValidation}
                  isValidating={isValidating}
                  couponError={couponError}
                  couponSuccess={couponSuccess}
                  isValid={isCouponValid}
                />
                <div className="flex flex-wrap gap-3">
                  <button
                    onClick={handleApplyCoupon}
                    className="rounded-lg bg-[#597485] px-4 py-2 text-sm font-semibold text-white transition hover:bg-[#4e6575]"
                  >
                    Apply Coupon
                  </button>
                  <button
                    onClick={handleRemoveCoupon}
                    className="rounded-lg border border-gray-300 px-4 py-2 text-sm font-semibold text-gray-600 transition hover:bg-gray-100 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-800"
                  >
                    Remove Coupon
                  </button>
                </div>
              </section>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default PaymentController;
