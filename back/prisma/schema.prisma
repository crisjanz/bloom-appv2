generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  MAIN
  ADDON
  SERVICE
}

enum InventoryMode {
  NONE
  OWN
  BUNDLE
}

enum Visibility {
  ONLINE
  POS
  BOTH
}

enum OrderType {
  DELIVERY
  PICKUP
}

enum OrderStatus {
  DRAFT
  PAID
  CANCELLED
  SCHEDULED
  COMPLETED
}

enum EmployeeType {
  CASHIER
  DESIGNER
  DRIVER
  ADMIN
}

enum ShortcutType {
  CHURCH
  FUNERAL_HOME
  SCHOOL
  HOSPITAL
  OTHER
}

model Product {
  id                      String        @id @default(uuid())
  name                    String
  slug                    String        @unique
  status                  String        @default("DRAFT")
  description             String
  categoryId              String
  reportingCategoryId     String
  recipeNotes             String?
  productType             ProductType   @default(MAIN)
  inventoryMode           InventoryMode @default(OWN)
  visibility              Visibility    @default(BOTH)
  showOnHomepage          Boolean       @default(false)
  isSubscriptionAvailable Boolean       @default(false)
  isActive                Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  images 		  String[] 	@default([])

  category          Category          @relation("ProductCategory", fields: [categoryId], references: [id])
  reportingCategory ReportingCategory @relation("ProductReportingCategory", fields: [reportingCategoryId], references: [id])

  featuredAssetId   String?
  variants          ProductVariant[]
  tags              ProductTag[]
  addonGroups       ProductAddOnGroup[]
  bundleComponents  BundleItem[]        @relation("BundleParent")
  includedInBundles BundleItem[]        @relation("BundleChild")
  orderItems        OrderItem[]
}

model ProductVariant {
  id             String   @id @default(uuid())
  productId      String
  name           String
  sku            String   @unique
  price          Int
  discountPrice  Int?
  stockLevel     Int?
  trackInventory Boolean  @default(true)
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id])
  options VariantOption[]
}

model ProductOption {
  id             String               @id @default(uuid())
  name           String
  impactVariants Boolean              @default(true)
  values         ProductOptionValue[]
}

model ProductOptionValue {
  id        String @id @default(uuid())
  label     String
  optionId  String
  sortOrder Int    @default(0)

  option   ProductOption   @relation(fields: [optionId], references: [id])
  variants VariantOption[]
}

model VariantOption {
  id            String @id @default(uuid())
  variantId     String
  optionValueId String

  variant     ProductVariant     @relation(fields: [variantId], references: [id])
  optionValue ProductOptionValue @relation(fields: [optionValueId], references: [id])
}

model BundleItem {
  id                 String @id @default(uuid())
  bundleProductId    String
  componentProductId String
  quantity           Int

  bundleProduct    Product @relation("BundleParent", fields: [bundleProductId], references: [id])
  componentProduct Product @relation("BundleChild", fields: [componentProductId], references: [id])
}

model AddOnGroup {
  id        String              @id @default(uuid())
  name      String
  isDefault Boolean             @default(false)
  addOns    AddOnProduct[]
  products  ProductAddOnGroup[] @relation("ProductToAddOnGroup")
}

model AddOnProduct {
  id             String @id @default(uuid())
  addonProductId String
  groupId        String

  group AddOnGroup @relation(fields: [groupId], references: [id])
}

model ProductAddOnGroup {
  id        String @id @default(uuid())
  productId String
  groupId   String

  product Product    @relation(fields: [productId], references: [id])
  group   AddOnGroup @relation("ProductToAddOnGroup", fields: [groupId], references: [id])
}

model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  products ProductTag[]
}

model ProductTag {
  id        String @id @default(uuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[] @relation("ProductCategory")
}

model ReportingCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[] @relation("ProductReportingCategory")
}

model Customer {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String?   @unique
  phone         String?
  notes         String?
  homeAddress   Address?  @relation("HomeAddress", fields: [homeAddressId], references: [id])
  homeAddressId String?   @unique
  addresses     Address[] @relation("RecipientAddresses")
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  address1   String
  address2   String?
  city       String
  province   String
  postalCode String
  phone      String?
  company   String?   @db.VarChar(255)  // Optional field

  customer   Customer? @relation("RecipientAddresses", fields: [customerId], references: [id])
  customerId String?

  homeOf            Customer? @relation("HomeAddress")
  ordersAsRecipient Order[]   @relation("OrderRecipient")
  ordersAsPickup    Order[]   @relation("PickupPerson")
}

model Order {
  id     String      @id @default(cuid())
  type   OrderType
  status OrderStatus @default(DRAFT)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  recipient   Address? @relation("OrderRecipient", fields: [recipientId], references: [id])
  recipientId String?

  pickupPerson   Address? @relation("PickupPerson", fields: [pickupPersonId], references: [id])
  pickupPersonId String?

  employee     Employee? @relation("EmployeeOrders", fields: [employeeId], references: [id])
  employeeId   String?


  orderItems OrderItem[]

  cardMessage         String?
  specialInstructions String?
  occasion            String?

  deliveryDate DateTime?
  deliveryTime String?

  deliveryFee Float   @default(0)
  discount    Float   @default(0)
  couponCode  String?
  couponId    String?
  coupon      Coupon? @relation(fields: [couponId], references: [id])

  gst           Float   @default(0)
  pst           Float   @default(0)
  paymentAmount Float   @default(0)
  paymentMethod String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  customName String?
  unitPrice  Int
  quantity   Int
  rowTotal   Int
}

model Coupon {
  id              String    @id @default(uuid())
  code            String    @unique
  description     String?
  discountPercent Float
  active          Boolean   @default(true)
  startDate       DateTime?
  endDate         DateTime?

  orders Order[]
}

model AddressShortcut {
  type ShortcutType
  id           String   @id @default(cuid())
  label        String
  address1     String
  address2     String?
  city         String
  province     String
  postalCode   String
  phoneNumbers String[]
}

model Employee {
  id        String        @id @default(cuid())
  name      String
  email     String?       
  phone     String?
  type      EmployeeType  @default(CASHIER)
  isActive  Boolean       @default(true)
  orders    Order[]       @relation("EmployeeOrders")
}



model MessageSuggestion {
  id      String   @id @default(cuid())
  label   String   // e.g. "Sympathy", "Birthday"
  message String
}

model PaymentSettings {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Stripe Settings
  stripeMode      String   @default("terminal") // "manual" or "terminal"
  stripePublicKey String
  stripeSecretKey String
  stripeTerminalId String?

  // Square Settings
  squareMode       String   @default("terminal") // "manual" or "terminal"
  squareAppId      String
  squareAccessToken String
  squareLocationId  String
  squareTerminalId  String?

  @@map("payment_settings")
}
