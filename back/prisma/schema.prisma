generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  MAIN
  ADDON
  SERVICE
}

enum InventoryMode {
  NONE
  OWN
  BUNDLE
}

enum Visibility {
  ONLINE
  POS
  BOTH
}

enum OrderType {
  DELIVERY
  PICKUP
}

enum OrderStatus {
  DRAFT
  PAID
  IN_DESIGN
  READY
  OUT_FOR_DELIVERY
  COMPLETED
  REJECTED
  CANCELLED
}

enum EmployeeType {
  CASHIER
  DESIGNER
  DRIVER
  ADMIN
}

enum ShortcutType {
  CHURCH
  FUNERAL_HOME
  SCHOOL
  HOSPITAL
  OTHER
}

model Product {
  id                      String        @id @default(uuid())
  name                    String
  slug                    String        @unique
  description             String
  categoryId              String
  reportingCategoryId     String
  recipeNotes             String?
  productType             ProductType   @default(MAIN)
  inventoryMode           InventoryMode @default(OWN)
  visibility              Visibility    @default(BOTH)
  showOnHomepage          Boolean       @default(false)
  isActive                Boolean       @default(true)
  isTaxable               Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  images                  String[]      @default([])

  // New Availability Fields
  availabilityType         String?       @default("always")
  holidayPreset           String?
  availableFrom           DateTime?
  availableTo             DateTime?
  notAvailableFrom        DateTime?
  notAvailableUntil       DateTime?
  isTemporarilyUnavailable Boolean      @default(false)
  unavailableUntil        DateTime?
  unavailableMessage      String?

  category          Category          @relation("ProductCategory", fields: [categoryId], references: [id])
  reportingCategory ReportingCategory @relation("ProductReportingCategory", fields: [reportingCategoryId], references: [id])

  featuredAssetId   String?
  variants          ProductVariant[]
  tags              ProductTag[]
  addonGroups       ProductAddOnGroup[]
  bundleComponents  BundleItem[]        @relation("BundleParent")
  includedInBundles BundleItem[]        @relation("BundleChild")
  orderItems        OrderItem[]
}

model ProductVariant {
  id             String   @id @default(uuid())
  productId      String
  name           String
  sku            String   @unique
  price          Int
  discountPrice  Int?
  stockLevel     Int?
  trackInventory Boolean  @default(true)
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id])
  options VariantOption[]
}

model ProductOption {
  id             String               @id @default(uuid())
  name           String
  impactVariants Boolean              @default(true)
  values         ProductOptionValue[]
}

model ProductOptionValue {
  id        String @id @default(uuid())
  label     String
  optionId  String
  sortOrder Int    @default(0)

  option   ProductOption   @relation(fields: [optionId], references: [id])
  variants VariantOption[]
}

model VariantOption {
  id            String @id @default(uuid())
  variantId     String
  optionValueId String

  variant     ProductVariant     @relation(fields: [variantId], references: [id])
  optionValue ProductOptionValue @relation(fields: [optionValueId], references: [id])
}

model BundleItem {
  id                 String @id @default(uuid())
  bundleProductId    String
  componentProductId String
  quantity           Int

  bundleProduct    Product @relation("BundleParent", fields: [bundleProductId], references: [id])
  componentProduct Product @relation("BundleChild", fields: [componentProductId], references: [id])
}

model AddOnGroup {
  id        String              @id @default(uuid())
  name      String
  isDefault Boolean             @default(false)
  addOns    AddOnProduct[]
  products  ProductAddOnGroup[] @relation("ProductToAddOnGroup")
}

model AddOnProduct {
  id             String @id @default(uuid())
  addonProductId String
  groupId        String

  group AddOnGroup @relation(fields: [groupId], references: [id])
}

model ProductAddOnGroup {
  id        String @id @default(uuid())
  productId String
  groupId   String

  product Product    @relation(fields: [productId], references: [id])
  group   AddOnGroup @relation("ProductToAddOnGroup", fields: [groupId], references: [id])
}

model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  products ProductTag[]
}

model ProductTag {
  id        String @id @default(uuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String?   @unique // Make optional for now
  parentId String?
  level    Int       @default(1) // 1=top level, 2=sub, 3=sub-sub (max 3 levels)
  sortOrder Int      @default(0)
  isActive Boolean   @default(true)
  
  // Self-referencing relationship for hierarchy
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  // Products can be assigned to any level
  products Product[] @relation("ProductCategory")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now()) // Default to now for existing rows
  
  @@unique([parentId, name]) // Unique name within same parent
}

model ReportingCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[] @relation("ProductReportingCategory")
}

model Customer {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String?   @unique
  phone         String?
  notes         String?
  homeAddress   Address?  @relation("HomeAddress", fields: [homeAddressId], references: [id])
  homeAddressId String?   @unique
  addresses     Address[] @relation("RecipientAddresses")
  orders        Order[]
  paymentTransactions PaymentTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üåç Updated Address model for international support
model Address {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  address1   String
  address2   String?
  city       String
  province   String  // Now supports state/province/region worldwide
  postalCode String  // Now supports postal codes/zip codes worldwide
  country    String  @default("CA") // ISO country code (CA, US, GB, etc.)
  phone      String?
  company    String? @db.VarChar(255)

  customer   Customer? @relation("RecipientAddresses", fields: [customerId], references: [id])
  customerId String?

  homeOf            Customer? @relation("HomeAddress")
  ordersAsRecipient Order[]   @relation("OrderRecipient")
  ordersAsPickup    Order[]   @relation("PickupPerson")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  // Add @default(now()) here

  @@index([country])
  @@index([customerId])
}

model Order {
  id     String      @id @default(cuid())
  orderNumber Int         @unique @default(autoincrement())
  type   OrderType
  status OrderStatus @default(DRAFT)
  images String[] @default([])

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  recipient   Address? @relation("OrderRecipient", fields: [recipientId], references: [id])
  recipientId String?

  pickupPerson   Address? @relation("PickupPerson", fields: [pickupPersonId], references: [id])
  pickupPersonId String?

  employee     Employee? @relation("EmployeeOrders", fields: [employeeId], references: [id])
  employeeId   String?

  orderItems OrderItem[]

  cardMessage         String?
  specialInstructions String?
  occasion            String?

  deliveryDate DateTime?
  deliveryTime String?

  deliveryFee Float   @default(0)
  discount    Float   @default(0)
  couponCode  String?
  couponId    String?
  coupon      Coupon? @relation(fields: [couponId], references: [id])

  // Dynamic tax breakdown - supports any number of tax rates
  taxBreakdown  Json    @default("[]") // Array of {name: string, rate: number, amount: number}
  totalTax      Float   @default(0)    // Sum of all tax amounts
  paymentAmount Float   @default(0)
  paymentMethod String?

  // Payment transaction links
  orderPayments OrderPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  customName String?
  unitPrice  Int
  quantity   Int
  rowTotal   Int
}

// UPDATED COMPREHENSIVE COUPON SYSTEM
model Coupon {
  id              String    @id @default(uuid())
  code            String    @unique
  name            String    // "Spring Sale 20% Off", "Welcome Discount"
  description     String?   // Optional description for admin reference
  discountType    String    // "PERCENTAGE", "FIXED_AMOUNT", "FREE_SHIPPING"
  value           Float     // 20 (for 20% or $20)
  
  // Usage limits
  usageLimit      Int?      // Max total uses (null = unlimited)
  usageCount      Int       @default(0) // Current usage count
  perCustomerLimit Int?     // Max uses per customer
  
  // Date restrictions
  startDate       DateTime?
  endDate         DateTime?
  
  // Order requirements
  minimumOrder    Float?    // Minimum order amount
  
  // Product/Category restrictions
  applicableProducts String[] @default([]) // Product IDs (empty = all products)
  applicableCategories String[] @default([]) // Category IDs
  
  // Channel restrictions
  posOnly         Boolean   @default(false) // POS-only coupons
  webOnly         Boolean   @default(false) // Website-only coupons
  
  // Status
  enabled         Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  orders          Order[]
  usages          CouponUsage[]
}

model CouponUsage {
  id        String   @id @default(uuid())
  couponId  String
  customerId String?  // Track per-customer usage
  orderId   String?  // Link to actual orders
  employeeId String? // Who applied it (POS context)
  source    String   // "POS", "WEBSITE"
  usedAt    DateTime @default(now())
  
  coupon    Coupon   @relation(fields: [couponId], references: [id])
}

// üåç Updated AddressShortcut for international support
model AddressShortcut {
  type         ShortcutType
  id           String   @id @default(cuid())
  label        String
  address1     String
  address2     String?
  city         String
  province     String   // Now supports state/province/region worldwide
  postalCode   String   // Now supports postal codes/zip codes worldwide
  country      String   @default("CA") // ISO country code
  phoneNumbers String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  // Add @default(now()) here

  @@index([country])
  @@index([type])
}

model Employee {
  id        String        @id @default(cuid())
  name      String
  email     String?       
  phone     String?
  type      EmployeeType  @default(CASHIER)
  isActive  Boolean       @default(true)
  orders    Order[]       @relation("EmployeeOrders")
  paymentTransactions PaymentTransaction[] @relation("EmployeeTransactions")
  refunds   Refund[]      @relation("EmployeeRefunds")
}

model MessageSuggestion {
  id      String   @id @default(cuid())
  label   String   // e.g. "Sympathy", "Birthday"
  message String
}

model PaymentSettings {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Stripe Settings
  stripeMode      String   @default("terminal") // "manual" or "terminal"
  stripePublicKey String
  stripeSecretKey String
  stripeTerminalId String?

  // Square Settings
  squareMode       String   @default("terminal") // "manual" or "terminal"
  squareAppId      String
  squareAccessToken String
  squareLocationId  String
  squareTerminalId  String?

  @@map("payment_settings")
}

model StoreSettings {
  id        String   @id @default(cuid())
  storeName String
  phone     String
  email     String
  address   String
  city      String
  state     String
  zipCode   String
  country   String   @default("CA")
  taxId     String?
  currency  String   @default("CAD")
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("store_settings")
}

model BusinessHoursSettings {
  id        String   @id @default(cuid())
  timezone  String   @default("America/Vancouver")
  
  mondayOpen     String?
  mondayClose    String?
  mondayEnabled  Boolean @default(true)
  
  tuesdayOpen    String?
  tuesdayClose   String?
  tuesdayEnabled Boolean @default(true)
  
  wednesdayOpen    String?
  wednesdayClose   String?
  wednesdayEnabled Boolean @default(true)
  
  thursdayOpen    String?
  thursdayClose   String?
  thursdayEnabled Boolean @default(true)
  
  fridayOpen     String?
  fridayClose    String?
  fridayEnabled  Boolean @default(true)
  
  saturdayOpen    String?
  saturdayClose   String?
  saturdayEnabled Boolean @default(true)
  
  sundayOpen     String?
  sundayClose    String?
  sundayEnabled  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("business_hours_settings")
}

model DeliveryExceptions {
  id         String   @id @default(cuid())
  exceptions Json[]   // Array of {date, noDelivery, noPickup} objects
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("delivery_exceptions")
}

model Holiday {
  id          String   @id @default(cuid())
  name        String   // "Christmas Day", "Mother's Day", "Vacation"
  startDate   String   // "2024-12-25" 
  endDate     String   // "2024-12-25" (same for single day, different for ranges)
  isOpen      Boolean  @default(false) // false = closed, true = special hours
  
  // Special hours (only used if isOpen = true)
  openTime    String?  // "10:00"
  closeTime   String?  // "15:00"
  
  // Metadata
  isRecurring Boolean  @default(false) // For future: annual holidays
  color       String   @default("red") // "red", "green", "blue" for calendar display
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("holidays")
}

model DeliveryZone {
  id          String   @id @default(cuid())
  name        String   // "Downtown", "Suburbs", "Zone 1", etc.
  minDistance Float    // Minimum distance in km
  maxDistance Float?   // Maximum distance in km (null = unlimited)
  fee         Float    // Delivery fee for this zone
  enabled     Boolean  @default(true)
  sortOrder   Int      @default(0) // For ordering zones
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("delivery_zones")
}

model DeliverySettings {
  id                  String   @id @default(cuid())
  // Store Location
  storeAddress        String   // Full address for distance calculations
  storePostalCode     String?  // Postal code as fallback
  storeLatitude       Float?   // For precise distance calculations
  storeLongitude      Float?   
  
  // Delivery Options
  deliveryMode        String   @default("DISTANCE") // "DISTANCE", "POSTAL_CODE", "REGION"
  freeDeliveryMinimum Float?   // Free delivery over $X
  maxDeliveryRadius   Float?   // Maximum delivery distance in km
  enabled             Boolean  @default(true)
  
  // Future features
  businessHoursOnly   Boolean  @default(true)
  advanceOrderHours   Int      @default(2) // Minimum hours for advance orders
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("delivery_settings")
}

// Future: For postal code zones
model DeliveryPostalZone {
  id         String   @id @default(cuid())
  name       String   // "Downtown Vancouver", "Richmond", etc.
  postalCodes String[] // Array of postal code prefixes: ["V6B", "V6C", "V6E"]
  fee        Float
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("delivery_postal_zones")
}

// Future: For region-based zones  
model DeliveryRegionZone {
  id        String   @id @default(cuid())
  name      String   // "Vancouver", "Burnaby", "Richmond"
  cities    String[] // Array of city names
  provinces String[] // Array of province codes
  fee       Float
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("delivery_region_zones")
}

// Add these to your schema.prisma

model GiftCard {
  id              String    @id @default(uuid())
  cardNumber      String    @unique // "GC-X7K9-M3R8"
  type            String    // "PHYSICAL", "DIGITAL"
  
  // Balance tracking
  initialValue    Float     @default(0)
  currentBalance  Float     @default(0)
  
  // Card details
  purchasedBy     String?   // Customer who bought it
  recipientEmail  String?   // For digital cards
  recipientName   String?
  message         String?   // Gift message
  
  // Status
  status          String    @default("INACTIVE") // "INACTIVE", "ACTIVE", "USED", "EXPIRED", "CANCELLED"
  expirationDate  DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  transactions    GiftCardTransaction[]
}

model GiftCardTransaction {
  id          String    @id @default(uuid())
  giftCardId  String
  orderId     String?   // When used for purchase
  type        String    // "PURCHASE", "REDEMPTION", "REFUND", "ACTIVATION"
  amount      Float     // Positive for purchase/refund, negative for redemption
  balanceAfter Float    // Remaining balance after transaction
  notes       String?
  employeeId  String?   // Who processed the transaction
  createdAt   DateTime  @default(now())
  
  giftCard    GiftCard  @relation(fields: [giftCardId], references: [id])
}

model POSSettings {
  id        String   @id @default(cuid())
  tabs      Json     // Store tab configuration as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pos_settings")
}

// PT-XXXX TRANSACTION SYSTEM
model TransactionCounter {
  id           String @id @default(cuid())
  currentValue Int    @default(0)
  prefix       String @default("PT")
  
  @@map("transaction_counter")
}

enum PaymentTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

enum PaymentMethodType {
  CASH
  CARD
  GIFT_CARD
  STORE_CREDIT
  CHECK
  COD
}

enum PaymentProvider {
  STRIPE
  SQUARE
  INTERNAL
}

enum PaymentChannel {
  POS
  PHONE
  WEBSITE
}

model PaymentTransaction {
  id              String                   @id @default(uuid())
  transactionNumber String                 @unique // PT-00001, PT-00002, etc.
  status          PaymentTransactionStatus @default(PENDING)
  channel         PaymentChannel
  
  // Transaction totals
  totalAmount     Float                    @default(0)
  taxAmount       Float                    @default(0)
  tipAmount       Float                    @default(0)
  
  // Customer and employee tracking
  customerId      String
  employeeId      String?
  
  // Metadata
  notes           String?
  receiptSent     Boolean                  @default(false)
  receiptEmail    String?
  
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  completedAt     DateTime?
  
  // Relations
  customer        Customer                 @relation(fields: [customerId], references: [id])
  employee        Employee?                @relation("EmployeeTransactions", fields: [employeeId], references: [id])
  paymentMethods  PaymentMethod[]
  orderPayments   OrderPayment[]
  refunds         Refund[]
  
  @@map("payment_transactions")
}

model PaymentMethod {
  id                      String              @id @default(uuid())
  transactionId           String
  type                    PaymentMethodType
  provider                PaymentProvider
  amount                  Float
  
  // Provider-specific data
  providerTransactionId   String?            // Stripe payment_intent_id, Square payment_id, etc.
  providerMetadata       Json?              // Provider-specific response data
  
  // Method-specific details
  cardLast4              String?            // For card payments
  cardBrand              String?            // visa, mastercard, etc.
  giftCardNumber         String?            // For gift card payments
  checkNumber            String?            // For check payments
  
  status                 String             @default("completed") // completed, failed, refunded
  processedAt            DateTime           @default(now())
  
  transaction            PaymentTransaction @relation(fields: [transactionId], references: [id])
  
  @@map("payment_methods")
}

model OrderPayment {
  id              String             @id @default(uuid())
  transactionId   String
  orderId         String
  amount          Float              // How much of this order was paid in this transaction
  
  transaction     PaymentTransaction @relation(fields: [transactionId], references: [id])
  order           Order              @relation(fields: [orderId], references: [id])
  
  @@map("order_payments")
}

model Refund {
  id              String             @id @default(uuid())
  transactionId   String
  refundNumber    String             @unique // RF-00001, RF-00002, etc.
  amount          Float
  reason          String?
  
  // Refund breakdown by payment method
  refundMethods   RefundMethod[]
  
  employeeId      String?
  processedAt     DateTime           @default(now())
  
  transaction     PaymentTransaction @relation(fields: [transactionId], references: [id])
  employee        Employee?          @relation("EmployeeRefunds", fields: [employeeId], references: [id])
  
  @@map("refunds")
}

model RefundMethod {
  id                    String         @id @default(uuid())
  refundId              String
  paymentMethodType     PaymentMethodType
  provider              PaymentProvider
  amount                Float
  
  // Provider refund tracking
  providerRefundId      String?        // Stripe refund_id, Square refund_id, etc.
  status                String         @default("completed") // completed, failed, pending
  
  refund                Refund         @relation(fields: [refundId], references: [id])
  
  @@map("refund_methods")
}

// Tax Rate Configuration
model TaxRate {
  id          String   @id @default(cuid())
  name        String   // e.g., "GST", "PST", "VAT", "Sales Tax"
  rate        Float    // Percentage (e.g., 5.00 for 5%)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(1)
  description String?  // Optional description
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  
  @@map("tax_rates")
  @@index([isActive])
  @@index([sortOrder])
}

// Notification Settings Storage
model NotificationSettings {
  id        String   @id @default(cuid())
  type      String   @unique // "ORDER_STATUS", "MARKETING", etc.
  settings  String   // JSON string of settings data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notification_settings")
}